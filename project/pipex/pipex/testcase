

TEST NUMBER 1: ./pipex '' '' '' '' and < '' '' | '' > ''
TEST NUMBER 2: ./pipex '' 'cat' 'cat' '' and < '' cat | cat > ''
TEST NUMBER 3: ./pipex 'infile' 'cat' 'cat' '' and < infile cat | cat > ''
TEST NUMBER 4: ./pipex '' 'cat' 'cat' 'outfile2' and < '' cat | cat > outfile
TEST NUMBER 5: ./pipex 'infile' '' '' 'outfile2' and < infile '' | '' > outfile
TEST NUMBER 6: ./pipex '' 'sleep 5' '' '' and < '' sleep 5 | '' > ''
TEST NUMBER 7: ./pipex '' '' 'sleep 5' '' and < '' '' | sleep 5 > ''
TEST NUMBER 8: ./pipex 'infile' 'cat' 'cat' 'outfile2' and < infile cat | cat > outfile
TEST NUMBER 9: ./pipex 'infile' '/bin/hello' '/bin/hello' 'outfile2' and < infile /bin/hello | /bin/hello > outfile
TEST NUMBER 10: ./pipex 'infile' '/bin/echo hello world' '/bin/cat' outfile2 and < infile /bin/echo hello world | /bin/cat > outfile
TEST NUMBER 11: ./pipex 'infile' 'sleep 5' 'echo hello world' 'outfile2' and < infile sleep 5 | echo hello world > outfile
TEST NUMBER 12: ./pipex 'infile' './testsegv' './testsegv' 'outfile2' and < infile ./testsegv | ./testsegv > outfile
TEST NUMBER 13: ./pipex 'infile' './myfolder' 'cat' 'outfile2' and < infile ./myfolder | cat > outfile
TEST NUMBER 14: ./pipex 'infile' 'cat' './myfolder' 'outfile2' and < infile cat | ./myfolder > outfile
TEST NUMBER 15: ./pipex 'testsegv.c' 'cat' 'grep str\ =\ NULL' 'outfile2' and < testsegv.c cat | grep str\ =\ NULL > outfile
TEST NUMBER 16: ./pipex 'infile2' 'cat' 'awk -F ";" "{print $1}"' 'outfile2' and < infile2 cat | awk -F ";" '{print $1}' > outfile
TEST NUMBER 17: ./pipex 'infile2' '"l""s"' '"normi""""nette" """-""R""" "CheckForbi""""ddenSo""urce""Header"' 'outfile2' and < infile2 "l""s" | "normi""""nette" """-""R""" "CheckForbi""""ddenSo""urce""Header" > outfile
TEST NUMBER 18: ./pipex 'infile2' '\a\b\c' '"l""s"""\ """""-""l""a"' 'outfile2' and < infile2 \a\b\c | "l""s"""\ """""-""l""a" > outfile
TEST NUMBER 19: ./pipex 'infile2' '\a\b\c\' '"l""s"""\ """""-""l""a"' 'outfile2' and < infile2 \a\b\c | "l""s"""\ """""-""l""a" > outfile
TEST NUMBER 20: ./pipex 'infile2' 'myfolder' 'myfolder' 'outfile2' and < infile2 myfolder | myfolder > outfile
TEST NUMBER 21: ./pipex 'infile2' 'copipex' 'copipex' 'outfile2' and < infile2 copipex | copipex > outfile
TEST NUMBER 22 : ./pipex infile2 ls "wc -l" outfile2 and < infile2 ls | wc -l > outfile when PATH is not setted
TEST NUMBER 23 : ./pipex infile2 /bin/ls "/usr/bin/wc -l" outfile2 and < infile2 /bin/ls | /usr/bin/wc -l > outfile when PATH is not setted

check 12 with fsanitize

# 12: The program handles execve errors                                     [LK]
The next tests will use the following command:
../pipex/pipex "assets/deepthought.txt" "cat" "notexisting" "outs/test-xx.txt"
(notexisting is a command that is not supposed to exist)

# 26: The program exits with the right status code                          [LK]
# 27: The output of the command contains 'command not found'                [LK]
# 28: The output of the command is correct                                  [LK]


-----------bash tester_pipex.sh----------

Leaks via valgrind:
Test 1 : valgrind ./pipex Makefile cat cat outf 			--> no leak cat - no leak cat - no leak main - no extra fd (main+child) - no extra fd on main
Test 2 : valgrind ./pipex run  			--> 12,252 leaks yes (it's ok) - no leak head - no leak main - no extra fd (main+child) - no extra fd on main
Test 3 : valgrind ./pipex Makefile /usr/bin/cat /usr/bin/head outf 	--> no leak cat - no leak head - no leak main - no extra fd (main+child) - no extra fd on main
Test 4 : valgrind ./pipex infile_no_r cat "echo yo" outfile_no_w 	--> no leak cat - no leak echo - no leak main - 2 extra fd (main+child) - no extra fd on main
----Test 5 : valgrind ./pipex Makefile catiop " " outf 			--> no leak catiop - 23 leaks empty cmd - no leak main - no extra fd (main+child) - no extra fd on main
----Test 6 : valgrind ./pipex Makefile ./a.out (chmod u-x) "echo yo" outf 	--> 8 leaks a.out - no leak echo - no leak main - no extra fd (main+child) - no extra fd on main
Zombies (children process not waited by pipex):
gcc: error: popo.c: No such file or directory
gcc: fatal error: no input files
compilation terminated.
-----Test 1 : ./pipex Makefile "sleep 3" "sleep 1" outf 			--> KO: 1 process became zombie before pipex returned (most probably sleep 1, please check 'zombie_test1')
Test 2 : ./pipex Makefile "sleep 1" "sleep 3" outf 			--> OK (sleep 1 did not became a zombie)
Test 3 : ./pipex bad_infile ls "sleep 2" outf 				--> OK (ls did not became a zombie)
Test 4 : ./pipex Makefile bad_cmd "sleep 1" outf 			--> OK (bad_cmd did not became a zombie)
